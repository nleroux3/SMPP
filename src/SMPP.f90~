subroutine SMPP
use declarations
implicit none
real(dp) :: mass_conservation = 0.0_dp, &     ! Mass conservation coefficient (=1 if mass is conserved)
        &   volume_water, &                   ! Volume of liquid water within the whole snowpack [m3]
        &   SWE, &                            ! SWE of the 2D snowpack [m2]
        &   time = 0._dp, &                   ! Time since beginning of simulation [s]
        &   Ta, &                             ! Air temperature [C]
        &   RH, &                             ! relative Humidity [decimal value]
        &   u, &                              ! Wind speed [m/s]
        &   Qe(N-1), &                        ! Latent heat flux [W/m2]
        &   Qh(N-1), &                        ! Sensible heat flux [W/m2]
        &   LW_net(N-1), &                    ! Net longwave radiation [W/m2]
        &   SW_in, &                          ! Incoming shorwave radiation [W/m2]
        &   LW_in, &                          ! Incoming longwave radiation [W/m2]
        &   Patm, &                           ! Atmospheric pressure [kPa]
        &   Tss_ini(N-1), &                   ! Initial snow surface temperature at each time step
        &   volume_water_ini, &               ! Initial volume of liquid water at time = 0 [m3]
        &   volume_water_frozen = 0._dp,  &   ! Volume of liquid water that refreezes during each time step [m3]
        &   SW_net_1(N-1,M-1), &              ! Net shortwave radiation [W/m2] in the band [0.3-0.8]
        &   SW_net_2(N-1,M-1), &              ! Net shortwave radiation [W/m2] in the band [0.8-1.5]
        &   Subl(N-1)                         ! Sublimation rate [m/s]
integer ::  q = 1, &                          ! Iteration number
        &   flag = 0, &                    
        &   h = 0                             ! Variable used to read the input met data

outflow  = 0.0_dp 
sum_fluxes = 0.0_dp  
volume_water_ini = sum(water_content(:,1:M-1,1) * Vol(:,1:M-1))
SWE = L1*L2*sum(dry_density)/(rho_w*real(N-1,dp)*real(M-1,dp))

call write_outputs_dat(q,flag,time,mass_conservation,SWE,Qe,Qh,LW_net)

!============================ Main iterations ==========================================
do while (time .le. tf)

   flag = 1
   Tss_ini = Tss

   !========= Convert classical grain size into optical grain size ================
   call conversion_grain

   !============ Compute of hydraulic and thermal parameters ====================
   call calc_parameters

   !============ Compute time step with CFL condition ===========================
   call timestep
   time = time+Dt
   
   !============ Read met data every met data time step =========================
   if (index_energy .eq. 0) then
      if (q .eq. 2 .and. h .eq. 0) then
      
         h = 1
         Ta = Ta_in(h)
         RH = RH_in(h)
         u = max(u_in(h),0.1_dp)
         LW_in = L_in(h)
         SW_in = K_in(h)
      
         if (index_ground .eq. 0) then 
            Tground = Tground_in(h)
         else
            Qground = Qground_in(h)
         endif

         !========== Compute the energy balance and snow surface temperature =========
         call pressure_atm(Patm)
         call air_density(Ta,Patm)
      
      else if (mod(q,iterations) .eq. 0 .and. q/iterations .ne. int(tf/iterations) .and. time .ge. Dt_ini * (q-1)) then
         h = h+1

         Ta = Ta_in(h)
         RH = RH_in(h)
         u = max(u_in(h),0.1_dp)
         LW_in = L_in(h)
         SW_in = K_in(h)
     
         if (index_ground .eq. 0) then 
            Tground = Tground_in(h)
         else
            Qground = Qground_in(h)
         endif
         
         if (isnan(Ta)) then
            write(*,*) h,Ta,RH,u,LW_in,SW_in
         endif

         !========== Compute the energy balance and snow surface temperature =========
         call pressure_atm(Patm)
         call air_density(Ta,Patm)
      
      endif
   else
         call pressure_atm(Patm)
         call air_density(Ta,Patm)

         SW_net_1 = 0._dp
         SW_net_2 = 0._dp
         Qh = 0._dp
         Qe = 0._dp
         LW_net = 0._dp
         Subl = 0._dp
         Hn = Hn_ini
         if (index_ground .eq. 0) then 
            Tground = Tground_in(1)
         else
            Qground = Qground_in(1)
         endif
   endif

   if (index_energy .eq. 0) call solver_turbulence(Ta,RH,time,Patm,u,LW_in,SW_in,Qe,Qh,Subl,LW_net,SW_net_1,SW_net_2) 

   !========= Compute of snowpack thinning and infiltration rate for melt case ==================
   call thinning_melt(Tss_ini,q,time,mass_conservation,SWE,Qe,Qh,Subl,LW_net)

   !========= Compute mass and energy fluxes at the boundaries ====================
   call boundaries
   
   !========= Compute mass and energy fluxes in internal cells ====================
   if (M .gt. 2 .and. N .gt. 2) then
      if (beta .gt. 0.0001) then  ! sloping snowpack

         !=========== Mass flux due to water pressure gradient ===================
         Fpresw(2:N-2,2:M-2) = K_west(2:N-2,2:M-2) * (P(1:N-3,2:M-2)-P(2:N-2,2:M-2)) * &
            & ( Sx_west(2:N-2,2:M-2) / dabs(xv(2:N-2,2:M-2)-xv(1:N-3,2:M-2)) + &
            & Sy_west(2:N-2,2:M-2) / dabs(yv(2:N-2,2:M-2)-yv(1:N-3,2:M-2))) 

         Fprese(2:N-2,2:M-2) = K_east(2:N-2,2:M-2) * (P(3:N-1,2:M-2)-P(2:N-2,2:M-2)) * &
            & ( Sx_east(2:N-2,2:M-2) / dabs(xv(3:N-1,2:M-2)-xv(2:N-2,2:M-2)) + &
            & Sy_east(2:N-2,2:M-2) / dabs(yv(3:N-1,2:M-2)-yv(2:N-2,2:M-2))) 

         Fpress(2:N-2,2:M-2) = K_south(2:N-2,2:M-2) * (P(2:N-2,1:M-3)-P(2:N-2,2:M-2)) * &
            & ( Sx_south(2:N-2,2:M-2) / dabs(xv(2:N-2,1:M-3)-xv(2:N-2,2:M-2)) + &
            & Sy_south(2:N-2,2:M-2) / dabs(yv(2:N-2,1:M-3)-yv(2:N-2,2:M-2))) 

         Fpresn(2:N-2,2:M-2) = K_north(2:N-2,2:M-2) * (P(2:N-2,3:M-1)-P(2:N-2,2:M-2)) * &
            & ( Sx_north(2:N-2,2:M-2) / dabs(xv(2:N-2,3:M-1)-xv(2:N-2,2:M-2)) + &
            & Sy_north(2:N-2,2:M-2) / dabs(yv(2:N-2,3:M-1)-yv(2:N-2,2:M-2))) 

         where (abs(Fprese) .lt. 1e-50_dp)
            Fprese = 0._dp 
         end where
         where (abs(Fpresw) .lt. 1e-50_dp)
            Fpresw = 0._dp 
         end where


         !============ Mass flux due to gravity force =============================
         Fgravw(2:N-2,2:M-2) = K_west(2:N-2,2:M-2) * Sy_west(2:N-2,2:M-2)                                     
         Fgrave(2:N-2,2:M-2) = -K_east(2:N-2,2:M-2) * Sy_east(2:N-2,2:M-2)                                       
         Fgravn(2:N-2,2:M-2) = K_north(2:N-2,2:M-2) * Sy_north(2:N-2,2:M-2)              
         Fgravs(2:N-2,2:M-2) = -K_south(2:N-2,2:M-2) * Sy_south(2:N-2,2:M-2)

         !========== Condition to avoid mass flow from dry to wet cells ==========
         call condition_Darcy

         
         Fpres(:,1:M-1) = Fpresn(:,1:M-1) + Fpress(:,1:M-1) + Fpresw(:,1:M-1) + Fprese(:,1:M-1)            
         Fgrav(:,1:M-1) = Fgravn(:,1:M-1) + Fgravs(:,1:M-1) + Fgravw(:,1:M-1) + Fgrave(:,1:M-1)


         !=========================== Heat flux =================================== 
         Fconds(2:N-2,2:M-2) = k_eff_south(2:N-2,2:M-2) * (T(2:N-2,1:M-3,1)-T(2:N-2,2:M-2,1)) * &
            & (Sy_south(2:N-2,2:M-2) / dabs(yv(2:N-2,2:M-2)-yv(2:N-2,1:M-3)) + &
            & Sx_south(2:N-2,2:M-2) / dabs(xv(2:N-2,2:M-2)-xv(2:N-2,1:M-3)))

         Fcondn(2:N-2,2:M-2) = k_eff_north(2:N-2,2:M-2) * (T(2:N-2,3:M-1,1)-T(2:N-2,2:M-2,1)) * &
            & (Sy_north(2:N-2,2:M-2) / dabs(yv(2:N-2,3:M-1)-yv(2:N-2,2:M-2)) + &
            & Sx_north(2:N-2,2:M-2) / dabs(xv(2:N-2,3:M-1)-xv(2:N-2,2:M-2)))

         Fconde(2:N-2,2:M-2) = k_eff_east(2:N-2,2:M-2) * (T(3:N-1,2:M-2,1)-T(2:N-2,2:M-2,1)) * &
            & (Sy_east(2:N-2,2:M-2) / dabs(yv(3:N-1,2:M-2)-yv(2:N-2,2:M-2)) + &
            & Sx_east(2:N-2,2:M-2) / dabs(xv(3:N-1,2:M-2)-xv(2:N-2,2:M-2)))

         Fcondw(2:N-2,2:M-2) = k_eff_west(2:N-2,2:M-2) * (T(1:N-3,2:M-2,1)-T(2:N-2,2:M-2,1)) * &
            & (Sy_west(2:N-2,2:M-2) / dabs(yv(1:N-3,2:M-2)-yv(2:N-2,2:M-2)) + &
            & Sx_west(2:N-2,2:M-2) / dabs(xv(1:N-3,2:M-2)-xv(2:N-2,2:M-2)))

         Fcond(:,1:M-1) = Fcondw(:,1:M-1) + Fconde(:,1:M-1) + Fconds(:,1:M-1) + Fcondn(:,1:M-1) + &
            & (SW_net_1(:,1:M-1) + SW_net_2(:,1:M-1)) * Sy_north(:,1:M-1) 


      else   ! beta=0, i.e. flat ground

         !================ Mass flux due to water pressure gradients =========================
         Fpresw(2:N-2,2:M-2) = Sx_west(2:N-2,2:M-2) * K_west(2:N-2,2:M-2) * &
            & (P(1:N-3,2:M-2)-P(2:N-2,2:M-2)) / dabs(xv(2:N-2,2:M-2)-xv(1:N-3,2:M-2))

         Fprese(2:N-2,2:M-2) = Sx_east(2:N-2,2:M-2) * K_east(2:N-2,2:M-2) * &
            & (P(3:N-1,2:M-2)-P(2:N-2,2:M-2)) / dabs(xv(3:N-1,2:M-2)-xv(2:N-2,2:M-2)) 

         Fpress(2:N-2,2:M-2) = Sy_south(2:N-2,2:M-2) * K_south(2:N-2,2:M-2) * &
            & (P(2:N-2,1:M-3)-P(2:N-2,2:M-2)) / dabs(yv(2:N-2,2:M-2)-yv(2:N-2,1:M-3))

         Fpresn(2:N-2,2:M-2) = Sy_north(2:N-2,2:M-2) * K_north(2:N-2,2:M-2) * &
            & (P(2:N-2,3:M-1)-P(2:N-2,2:M-2)) / dabs(yv(2:N-2,3:M-1)-yv(2:N-2,2:M-2))

         where (abs(Fprese) .lt. 1e-50_dp)
            Fprese = 0._dp 
         end where
         where (abs(Fpresw) .lt. 1e-50_dp)
            Fpresw = 0._dp 
         end where

         !================== Mass flux due to gravity force ===========================
         Fgravw(2:N-2,2:M-2) = K_west(2:N-2,2:M-2) * Sy_west(2:N-2,2:M-2)                                     
         Fgrave(2:N-2,2:M-2) = -K_east(2:N-2,2:M-2) * Sy_east(2:N-2,2:M-2)                                       
         Fgravn(2:N-2,2:M-2) = K_north(2:N-2,2:M-2) * Sy_north(2:N-2,2:M-2)              
         Fgravs(2:N-2,2:M-2) = -K_south(2:N-2,2:M-2) * Sy_south(2:N-2,2:M-2)

         !========== Condition to avoid mass flow from dry to wet cells ==========
         call condition_Darcy 

         Fpres(:,1:M-1) = Fpresn(:,1:M-1) + Fpress(:,1:M-1) + Fpresw(:,1:M-1) + Fprese(:,1:M-1)            
         Fgrav(:,1:M-1) = Fgravn(:,1:M-1) + Fgravs(:,1:M-1) + Fgravw(:,1:M-1) + Fgrave(:,1:M-1)

         !====================== Heat fluxes =========================================
         Fconds(2:N-2,2:M-2) = Sy_south(2:N-2,2:M-2) * k_eff_south(2:N-2,2:M-2) * &
            & (T(2:N-2,1:M-3,1)-T(2:N-2,2:M-2,1)) / dabs(yv(2:N-2,2:M-2)-yv(2:N-2,1:M-3))

         Fcondn(2:N-2,2:M-2) = Sy_north(2:N-2,2:M-2) * k_eff_north(2:N-2,2:M-2) * &
            & (T(2:N-2,3:M-1,1)-T(2:N-2,2:M-2,1)) / dabs(yv(2:N-2,2:M-2)-yv(2:N-2,3:M-1))

         Fconde(2:N-2,2:M-2) = Sx_east(2:N-2,2:M-2) * k_eff_east(2:N-2,2:M-2) * &
            & (T(3:N-1,2:M-2,1)-T(2:N-2,2:M-2,1)) / dabs(xv(2:N-2,2:M-2)-xv(3:N-1,2:M-2))

         Fcondw(2:N-2,2:M-2) = Sx_west(2:N-2,2:M-2) * k_eff_west(2:N-2,2:M-2) * &
            & (T(1:N-3,2:M-2,1)-T(2:N-2,2:M-2,1)) / dabs(xv(2:N-2,2:M-2)-xv(1:N-3,2:M-2))

         Fcond(:,1:M-1) = Fcondw(:,1:M-1) + Fconde(:,1:M-1) + Fconds(:,1:M-1) + Fcondn(:,1:M-1)+ &
            & (SW_net_1(:,1:M-1) + SW_net_2(:,1:M-1)) * Sy_north(:,1:M-1) 


      endif

   elseif (M .eq. 2 .and. N .gt. 2) then  ! one layer snowpack

         ! fluxes computed in subroutine "boundaries.f90"

         !========== Condition to avoid mass flow from dry to wet cells ==========
         call condition_Darcy 

         Fpres(:,1) = Fpresn(:,1) + Fpress(:,1) + Fpresw(:,1) + Fprese(:,1)         
         Fgrav(:,1) = Fgravn(:,1) + Fgravs(:,1) + Fgravw(:,1) + Fgrave(:,1)

         Fcond(:,1) = Fcondw(:,1) + Fconde(:,1) + Fconds(:,1) + Fcondn(:,1)+ &
            & (SW_net_1(:,1) + SW_net_2(:,1)) * Sy_north(:,1) 


   endif

   !============= Solve mass and heat equations using FVM =========================
   call solver_water_heat
   
   !============= Check if water content computed is NaN ===========================
   call check_nan

   !============= Compute refreezing of liquid water content ===========================
   call refreezing(volume_water_frozen)

   !============= Compute total volume of liquid water and mass conservation ================
   sum_fluxes = sum_fluxes + (sum(Fgravs(:,1) + Fgravn(:,M-1)) + sum(Fgrave(N-1,1:M-1) + Fgravw(1,1:M-1))) * Dt
   volume_water = sum(water_content(:,1:M-1,1) * Vol(:,1:M-1)) - volume_water_ini + volume_water_frozen
   mass_conservation = volume_water / sum_fluxes
    
   SWE = L1*L2*sum(dry_density)/(rho_w*real(N-1,dp)*real(M-1,dp))
    
   !============ Compute wet and dry snow metamorphisms ===================================
   call dry_metamorphism
   call wet_metamorphism

   !========================= Write ouputs in files ===================================
   call write_outputs_dat(q,flag,time,mass_conservation,SWE,Qe,Qh,LW_net)


enddo

!================== end of iterations ===========================
flag=3
call write_outputs_dat(q,flag,time,mass_conservation,SWE,Qe,Qh,LW_net)


return
end
