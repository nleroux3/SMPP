! This function estimates the energy and water flows through the snow matrix, as well as refreezing of kliquid water
subroutine energy_water_flows(num,dir)
USE Declarations
implicit none
 INTERFACE
 	!SUBROUTINE VTSWriter(TimeStep,nx,ny,x,y,Quantity,folder,opt)
	!	integer*4 :: TimeStep,nx,ny
         !       real*8, DIMENSION(:,:) :: x,y
	!	real*8, DIMENSION(:,:) :: Quantity
	!	character(12) :: folder
	!	character(3) :: opt
	!END SUBROUTINE VTSWriter	
	SUBROUTINE thinning_melt(q,mass_conservation,time,M_ini,dir,num)
		integer*4, INTENT(IN) :: q,M_ini
		real*8, INTENT(IN) :: mass_conservation,time
		character(5), INTENT(IN) :: num
		character(15), INTENT(IN) :: dir
	END SUBROUTINE thinning_melt
	SUBROUTINE calc_parameters
	END SUBROUTINE calc_parameters
	SUBROUTINE boundaries 
	END SUBROUTINE boundaries 
	SUBROUTINE timestep
	END SUBROUTINE timestep
 END INTERFACE
real*8 :: mass_conservation,volume_water,SWE,time,inv_Lf_rhow_w,inv_N_1,inv_rho_i
real*8, allocatable :: ice_content(:,:), inv_Vol(:,:)
integer*4 :: q,ppp,flag
integer*4 :: N_ini,M_ini
Character(6) pppstring
character(5) num,q_char
character(15) dir

 allocate(ice_content(N-1,M-1),inv_Vol(N-1,M-1))

 mass_conservation=0.
 inv_Lf_rhow_w=1./(Lf*rho_w)
 inv_N_1=1./(N-1)
 inv_rho_i=1./rho_i

 N_ini=N
 M_ini=M



 outflow(:)=0.  ! [m3/s]
 sum_fluxes=0.  ! [m3]


 DO j=1,M-1
	mean_water_content(j)=sum(water_content(:,j,1))*inv_N_1
	mean_dry_density(j)=sum(dry_density(:,j))*inv_N_1

 ENDDO


               



SWE=L1*L2*sum(mean_dry_density(:))/(rho_w*(M-1))




! Main iteration through time
q=1
time=0.
DO WHILE (time.LE.tf)
	inv_Vol=1./Vol
	flag=1
	write(q_char, '(i4.4)' ) q/iterations

	volume_water=0.

	! write the files that will be plotted by Paraview for initial conditions
	IF (q.EQ.1) THEN
		CALL VTSWriter(q,N,M,xn,yn,water_content(:,:,1),'water_output','ini')
		CALL VTSWriter(q,N,M,xn,yn,T(:,:,1),'tempe_output','ini')
		CALL VTSWriter(q,N,M,xn,yn,dry_density(:,:),'densi_output','ini')
  		CALL VTSWriter(q,N,M,xn,yn,grain_size(:,:),'Dopti_output','ini')
      
		CALL VTSWriter(q/iterations,N,M,xn,yn,water_content(:,:,1),'water_output','int')
		CALL VTSWriter(q/iterations,N,M,xn,yn,T(:,:,1),'tempe_output','int')
		CALL VTSWriter(q/iterations,N,M,xn,yn,dry_density(:,:),'densi_output','int')
		CALL VTSWriter(q/iterations,N,M,xn,yn,grain_size(:,:),'Dopti_output','int')

		open(16,file='../outputs/'//dir//'/dry_density_'//trim(num)//'.dat')
		write(16,*) (mean_dry_density(j), j = 1, M_ini-1)


		open(18,file='../outputs/'//dir//'/outflow_'//trim(num)//'.dat')
		write(18,*)  (outflow(i),i=1,N-1)


		open(20,file='../outputs/'//dir//'/max_theta_'//trim(num)//'.dat')
		write(20,*)  maxval(water_content(:,:,1))

		open(21,file='../outputs/'//dir//'/mean_theta_'//trim(num)//'.dat')
		write(21,*)  (mean_water_content(j),j=1,M_ini-1)

		open(22,file='../outputs/SWE_ini.dat')
		write(22,*) SWE
		close(22)

		open(23,file='../outputs/mass_conservation/mass_conservation_'//trim(num)//'.dat')
		write(23,*) mass_conservation




	ENDIF

	! Computation of snowpack thinning and infiltration rate
	call thinning_melt(q,mass_conservation,time,M_ini,dir,num)

	! Computation of the hydraulic and thermal parameters for snow matrix
	call calc_parameters

	call timestep
	time=time+Dt


	! Computation of the mass and energy fluxes at the boundaries of the snow matrix domain
	call boundaries 
	
	! Computation of the energy and water fluxes in the internal cells in the snow matrix domain	
	IF (M.GT.2) THEN

		IF (beta.NE.0) THEN

			!----------- Mass flux due to WATER PRESSURE GRADIENTS --------------------------------
			Fpresw(2:N-2,2:M-2)=Sx_west(2:N-2,2:M-2)*K_west(2:N-2,2:M-2)*&
				&(P(1:N-3,2:M-2)-P(2:N-2,2:M-2))/(abs(xv(2:N-2,2:M-2)-xv(1:N-3,2:M-2)))+&
				&Sy_west(2:N-2,2:M-2)*K_west(2:N-2,2:M-2)*(P(1:N-3,2:M-2)-P(2:N-2,2:M-2))&
				&/(abs(yv(2:N-2,2:M-2)-yv(1:N-3,2:M-2))) 

			Fprese(2:N-2,2:M-2)=Sx_east(2:N-2,2:M-2)*K_east(2:N-2,2:M-2)*&
				&(P(3:N-1,2:M-2)-P(2:N-2,2:M-2))/(abs(xv(3:N-1,2:M-2)-xv(2:N-2,2:M-2)))+&
				&Sy_east(2:N-2,2:M-2)*K_east(2:N-2,2:M-2)*(P(3:N-1,2:M-2)-P(2:N-2,2:M-2))&
				&/(abs(yv(3:N-1,2:M-2)-yv(2:N-2,2:M-2)))  

			Fpress(2:N-2,2:M-2)=Sy_south(2:N-2,2:M-2)*K_south(2:N-2,2:M-2)*&
				&(P(2:N-2,1:M-3)-P(2:N-2,2:M-2))/(abs(yv(2:N-2,2:M-2)-yv(2:N-2,1:M-3)))&
				&+Sx_south(2:N-2,2:M-2)*K_south(2:N-2,2:M-2)*(P(2:N-2,1:M-3)-P(2:N-2,2:M-2))&
				&/(abs(xv(2:N-2,2:M-2)-xv(2:N-2,1:M-3))) 

			Fpresn(2:N-2,2:M-2)=Sy_north(2:N-2,2:M-2)*K_north(2:N-2,2:M-2)*&
				&(P(2:N-2,3:M-1)-P(2:N-2,2:M-2))/(abs(yv(2:N-2,3:M-1)-yv(2:N-2,2:M-2)))&
				&+Sx_north(2:N-2,2:M-2)*K_north(2:N-2,2:M-2)*(P(2:N-2,3:M-1)-P(2:N-2,2:M-2))&
				&/(abs(xv(2:N-2,3:M-1)-xv(2:N-2,2:M-2))) 

			!WHERE (abs(Fprese(2:N-2,2:M-2)) .LE. 1e-12) 
				Fprese=0.
			!END WHERE
			!WHERE (abs(Fpresw(2:N-2,2:M-2)) .LE. 1e-12)
				Fpresw=0.
		!	END WHERE

			!----------- Mass flux due to GRAVITY FORCE --------------------------------
			Fgravw(2:N-2,2:M-2)=K_west(2:N-2,2:M-2)*Sy_west(2:N-2,2:M-2)                                     
			Fgrave(2:N-2,2:M-2)=-K_east(2:N-2,2:M-2)*Sy_east(2:N-2,2:M-2)                                       
			Fgravn(2:N-2,2:M-2)=K_north(2:N-2,2:M-2)*Sy_north(2:N-2,2:M-2)              
			Fgravs(2:N-2,2:M-2)=-K_south(2:N-2,2:M-2)*Sy_south(2:N-2,2:M-2)


			WHERE  (water_content(2:N-2,2:M-2,1) .LE. irreducible) 
				WHERE (Fgravs(2:N-2,2:M-2)+Fpress(2:N-2,2:M-2) .LE. 0.)
					Fpress(2:N-2,2:M-2)=0.
					Fgravs(2:N-2,2:M-2)=0.
					Fpresn(2:N-2,1:M-3)=0.
					Fgravn(2:N-2,1:M-3)=0.
				END WHERE
				WHERE (Fgrave(2:N-2,2:M-2)+Fprese(2:N-2,2:M-2) .LE. 0.)
					Fprese(2:N-2,2:M-2)=0.
					Fgrave(2:N-2,2:M-2)=0.
					Fpresw(3:N-1,2:M-2)=0.
					Fgravw(3:N-1,2:M-2)=0.
				END WHERE
				WHERE (Fgravw(2:N-2,2:M-2)+Fpresw(2:N-2,2:M-2) .LE. 0.)
					Fpresw(2:N-2,2:M-2)=0.
					Fgravw(2:N-2,2:M-2)=0.
					Fprese(1:N-3,2:M-2)=0.
					Fgrave(1:N-3,2:M-2)=0.
				END WHERE
				WHERE (Fgravn(2:N-2,2:M-2)+Fpresn(2:N-2,2:M-2) .LE. 0.)
					Fpresn(2:N-2,2:M-2)=0.
					Fgravn(2:N-2,2:M-2)=0.
					Fpress(2:N-2,3:M-1)=0.
					Fgravs(2:N-2,3:M-1)=0.
				END WHERE
			END WHERE
			!SOUTH
			WHERE  (water_content(2:N-2,1,1) .LE. irreducible) 

				WHERE (Fgrave(2:N-2,1)+Fprese(2:N-2,1) .LE. 0.)
					Fprese(2:N-2,1)=0.
					Fgrave(2:N-2,1)=0.
					Fpresw(3:N-1,1)=0.
					Fgravw(3:N-1,1)=0.
				END WHERE
				WHERE (Fgravw(2:N-2,1)+Fpresw(2:N-2,1) .LE. 0.)
					Fpresw(2:N-2,1)=0.
					Fgravw(2:N-2,1)=0.
					Fprese(1:N-3,1)=0.
					Fgrave(1:N-3,1)=0.
				END WHERE
				WHERE (Fgravn(2:N-2,1)+Fpresn(2:N-2,1) .LE. 0.)
					Fpresn(2:N-2,1)=0.
					Fgravn(2:N-2,1)=0.
					Fpress(2:N-2,2)=0.
					Fgravs(2:N-2,2)=0.
				END WHERE
			END WHERE
			! NORTH
			WHERE  (water_content(2:N-2,M-1,1) .LE. irreducible) 
				WHERE (Fgravs(2:N-2,M-1)+Fpress(2:N-2,M-1) .LE. 0.)
					Fpress(2:N-2,M-1)=0.
					Fgravs(2:N-2,M-1)=0.
					Fpresn(2:N-2,M-2)=0.
					Fgravn(2:N-2,M-2)=0.
				END WHERE
				WHERE (Fgrave(2:N-2,M-1)+Fprese(2:N-2,M-1) .LE. 0.)
					Fprese(2:N-2,M-1)=0.
					Fgrave(2:N-2,M-1)=0.
					Fpresw(3:N-1,M-1)=0.
					Fgravw(3:N-1,M-1)=0.
				END WHERE
				WHERE (Fgravw(2:N-2,M-1)+Fpresw(2:N-2,M-1) .LE. 0.)
					Fpresw(2:N-2,M-1)=0.
					Fgravw(2:N-2,M-1)=0.
					Fprese(1:N-3,M-1)=0.
					Fgrave(1:N-3,M-1)=0.
				END WHERE

			END WHERE
			!EAST
			WHERE  (water_content(N-1,2:M-2,1) .LE. irreducible) 
				WHERE (Fgravs(N-1,2:M-2)+Fpress(N-1,2:M-2) .LE. 0.)
					Fpress(N-1,2:M-2)=0.
					Fgravs(N-1,2:M-2)=0.
					Fpresn(N-1,1:M-3)=0.
					Fgravn(N-1,1:M-3)=0.
				END WHERE
				WHERE (Fgravw(N-1,2:M-2)+Fpresw(N-1,2:M-2) .LE. 0.)
					Fpresw(N-1,2:M-2)=0.
					Fgravw(N-1,2:M-2)=0.
					Fprese(N-2,2:M-2)=0.
					Fgrave(N-2,2:M-2)=0.
				END WHERE
				WHERE (Fgravn(N-1,2:M-2)+Fpresn(N-1,2:M-2) .LE. 0.)
					Fpresn(N-1,2:M-2)=0.
					Fgravn(N-1,2:M-2)=0.
					Fpress(N-1,3:M-1)=0.
					Fgravs(N-1,3:M-1)=0.
				END WHERE
			END WHERE
			!WEST
			WHERE  (water_content(1,2:M-2,1) .LE. irreducible) 
				WHERE (Fgravs(1,2:M-2)+Fpress(1,2:M-2) .LE. 0.)
					Fpress(1,2:M-2)=0.
					Fgravs(1,2:M-2)=0.
					Fpresn(1,1:M-3)=0.
					Fgravn(1,1:M-3)=0.
				END WHERE
				WHERE (Fgrave(1,2:M-2)+Fprese(1,2:M-2) .LE. 0.)
					Fprese(1,2:M-2)=0.
					Fgrave(1,2:M-2)=0.
					Fpresw(2,2:M-2)=0.
					Fgravw(2,2:M-2)=0.
				END WHERE
				WHERE (Fgravn(1,2:M-2)+Fpresn(1,2:M-2) .LE. 0.)
					Fpresn(1,2:M-2)=0.
					Fgravn(1,2:M-2)=0.
					Fpress(1,3:M-1)=0.
					Fgravs(1,3:M-1)=0.
				END WHERE
			END WHERE
			!NORTH_EAST
			IF  (water_content(N-1,M-1,1) .LE. irreducible) THEN
				IF (Fgravs(N-1,M-1)+Fpress(N-1,M-1) .LE. 0.) THEN
					Fpress(N-1,M-1)=0.
					Fgravs(N-1,M-1)=0.
					Fpresn(N-1,M-2)=0.
					Fgravn(N-1,M-2)=0.
				ENDIF
				IF (Fgravw(N-1,M-1)+Fpresw(N-1,M-1) .LE. 0.) THEN
					Fpresw(N-1,M-1)=0.
					Fgravw(N-1,M-1)=0.
					Fprese(N-2,M-1)=0.
					Fgrave(N-2,M-1)=0.
				ENDIF
			ENDIF
			! SOUTH EAST
			IF  (water_content(N-1,1,1) .LE. irreducible)  THEN
				IF (Fgravw(N-1,1)+Fpresw(N-1,1) .LE. 0.) THEN
					Fpresw(N-1,1)=0.
					Fgravw(N-1,1)=0.
					Fprese(N-2,1)=0.
					Fgrave(N-2,1)=0.
				ENDIF
				IF (Fgravn(N-1,1)+Fpresn(N-1,1) .LE. 0.) THEN
					Fpresn(N-1,1)=0.
					Fgravn(N-1,1)=0.
					Fpress(N-1,2)=0.
					Fgravs(N-1,2)=0.
				ENDIF
			ENDIF
			! SOUTH WEST
			IF  (water_content(1,1,1) .LE. irreducible)  THEN
				IF (Fgrave(1,1)+Fprese(1,1) .LE. 0.) THEN
					Fprese(1,1)=0.
					Fgrave(1,1)=0.
					Fpresw(2,1)=0.
					Fgravw(2,1)=0.
				ENDIF
				IF (Fgravn(1,1)+Fpresn(1,1) .LE. 0.) THEN
					Fpresn(1,1)=0.
					Fgravn(1,1)=0.
					Fpress(1,2)=0.
					Fgravs(1,2)=0.
				ENDIF
			ENDIF
			! NORTH WEST
			IF  (water_content(1,M-1,1) .LE. irreducible)  THEN
				IF (Fgravs(1,M-1)+Fpress(1,M-1) .LE. 0.) THEN
					Fpress(1,M-1)=0.
					Fgravs(1,M-1)=0.
					Fpresn(1,M-2)=0.
					Fgravn(1,M-2)=0.
				ENDIF
				IF (Fgrave(1,M-1)+Fprese(1,M-1) .LE. 0.) THEN
					Fprese(1,M-1)=0.
					Fgrave(1,M-1)=0.
					Fpresw(2,M-1)=0.
					Fgravw(2,M-1)=0.
				ENDIF
			ENDIF

			Fpres=Fpresn+Fpress+Fpresw+Fprese				
			Fgrav=Fgravn+Fgravs+Fgravw+Fgrave



			!------------- HEAT FLUXES ----------------------------------- 
			Fconds(2:N-2,2:M-2)=Sy_south(2:N-2,2:M-2)*k_eff_south(2:N-2,2:M-2)&
				&*(T(2:N-2,1:M-3,1)-T(2:N-2,2:M-2,1))/(abs(yv(2:N-2,2:M-2)-yv(2:N-2,1:M-3)))&
				&+Sx_south(2:N-2,2:M-2)*k_eff_south(2:N-2,2:M-2)*(T(2:N-2,1:M-3,1)-T(2:N-2,2:M-2,1))&
				&/(abs(xv(2:N-2,2:M-2)-xv(2:N-2,1:M-3)))

			Fcondn(2:N-2,2:M-2)=Sy_south(2:N-2,2:M-2)*k_eff_north(2:N-2,2:M-2)&
				&*(T(2:N-2,3:M-1,1)-T(2:N-2,2:M-2,1))/(abs(yv(2:N-2,2:M-2)-yv(2:N-2,3:M-1)))&
				&+Sx_south(2:N-2,2:M-2)*k_eff_north(2:N-2,2:M-2)*(T(2:N-2,3:M-1,1)-T(2:N-2,2:M-2,1))&
				&/(abs(xv(2:N-2,2:M-2)-xv(2:N-2,3:M-1)))

			Fconde(2:N-2,2:M-2)=Sy_east(2:N-2,2:M-2)*k_eff_east(2:N-2,2:M-2)*&
				&(T(3:N-1,2:M-2,1)-T(2:N-2,2:M-2,1))/(abs(yv(2:N-2,2:M-2)-yv(3:N-1,2:M-2)))&
				&+Sx_east(2:N-2,2:M-2)*k_eff_east(2:N-2,2:M-2)*(T(3:N-1,2:M-2,1)-T(2:N-2,2:M-2,1))&
				&/(abs(xv(2:N-2,2:M-2)-xv(3:N-1,2:M-2)))

			Fcondw(2:N-2,2:M-2)=Sy_west(2:N-2,2:M-2)*k_eff_west(2:N-2,2:M-2)*&
				&(T(1:N-3,2:M-2,1)-T(2:N-2,2:M-2,1))/(abs(yv(2:N-2,2:M-2)-yv(1:N-3,2:M-2)))&
				&+Sx_west(2:N-2,2:M-2)*k_eff_west(2:N-2,2:M-2)*(T(1:N-3,2:M-2,1)-T(2:N-2,2:M-2,1))&
				&/(abs(xv(2:N-2,2:M-2)-xv(1:N-3,2:M-2)))

			Fcond(2:N-2,2:M-2)=Fcondw(2:N-2,2:M-2)+Fconde(2:N-2,2:M-2)&
				&+Fconds(2:N-2,2:M-2)+Fcondn(2:N-2,2:M-2)


		ELSE   ! beta=0

			!----------- Mass flux due to WATER PRESSURE GRADIENTS --------------------------------
			Fpresw(2:N-2,2:M-2)=Sx_west(2:N-2,2:M-2)*K_west(2:N-2,2:M-2)*&
				&(P(1:N-3,2:M-2)-P(2:N-2,2:M-2))/(abs(xv(2:N-2,2:M-2)-xv(1:N-3,2:M-2)))

			Fprese(2:N-2,2:M-2)=Sx_east(2:N-2,2:M-2)*K_east(2:N-2,2:M-2)*&
				&(P(3:N-1,2:M-2)-P(2:N-2,2:M-2))/(abs(xv(3:N-1,2:M-2)-xv(2:N-2,2:M-2))) 

			Fpress(2:N-2,2:M-2)=Sy_south(2:N-2,2:M-2)*K_south(2:N-2,2:M-2)*&
				&(P(2:N-2,1:M-3)-P(2:N-2,2:M-2))/(abs(yv(2:N-2,2:M-2)-yv(2:N-2,1:M-3)))

			Fpresn(2:N-2,2:M-2)=Sy_north(2:N-2,2:M-2)*K_north(2:N-2,2:M-2)*&
				&(P(2:N-2,3:M-1)-P(2:N-2,2:M-2))/(abs(yv(2:N-2,3:M-1)-yv(2:N-2,2:M-2)))

			!WHERE (abs(Fprese(2:N-2,2:M-2)) .LE. 1e-12) 
				Fprese=0.
			!END WHERE
			!WHERE (abs(Fpresw(2:N-2,2:M-2)) .LE. 1e-12)
				Fpresw=0.
			!END WHERE
	


			!----------- Mass flux due to GRAVITY FORCE --------------------------------
			Fgravw(2:N-2,2:M-2)=K_west(2:N-2,2:M-2)*Sy_west(2:N-2,2:M-2)                                     
			Fgrave(2:N-2,2:M-2)=-K_east(2:N-2,2:M-2)*Sy_east(2:N-2,2:M-2)                                       
			Fgravn(2:N-2,2:M-2)=K_north(2:N-2,2:M-2)*Sy_north(2:N-2,2:M-2)              
			Fgravs(2:N-2,2:M-2)=-K_south(2:N-2,2:M-2)*Sy_south(2:N-2,2:M-2)


			WHERE  (water_content(2:N-2,2:M-2,1) .LE. irreducible) 
				WHERE (Fgravs(2:N-2,2:M-2)+Fpress(2:N-2,2:M-2) .LE. 0.)
					Fpress(2:N-2,2:M-2)=0.
					Fgravs(2:N-2,2:M-2)=0.
					Fpresn(2:N-2,1:M-3)=0.
					Fgravn(2:N-2,1:M-3)=0.
				END WHERE
				WHERE (Fgrave(2:N-2,2:M-2)+Fprese(2:N-2,2:M-2) .LE. 0.)
					Fprese(2:N-2,2:M-2)=0.
					Fgrave(2:N-2,2:M-2)=0.
					Fpresw(3:N-1,2:M-2)=0.
					Fgravw(3:N-1,2:M-2)=0.
				END WHERE
				WHERE (Fgravw(2:N-2,2:M-2)+Fpresw(2:N-2,2:M-2) .LE. 0.)
					Fpresw(2:N-2,2:M-2)=0.
					Fgravw(2:N-2,2:M-2)=0.
					Fprese(1:N-3,2:M-2)=0.
					Fgrave(1:N-3,2:M-2)=0.
				END WHERE
				WHERE (Fgravn(2:N-2,2:M-2)+Fpresn(2:N-2,2:M-2) .LE. 0.)
					Fpresn(2:N-2,2:M-2)=0.
					Fgravn(2:N-2,2:M-2)=0.
					Fpress(2:N-2,3:M-1)=0.
					Fgravs(2:N-2,3:M-1)=0.
				END WHERE
			END WHERE
			!SOUTH
			WHERE  (water_content(2:N-2,1,1) .LE. irreducible) 

				WHERE (Fgrave(2:N-2,1)+Fprese(2:N-2,1) .LE. 0.)
					Fprese(2:N-2,1)=0.
					Fgrave(2:N-2,1)=0.
					Fpresw(3:N-1,1)=0.
					Fgravw(3:N-1,1)=0.
				END WHERE
				WHERE (Fgravw(2:N-2,1)+Fpresw(2:N-2,1) .LE. 0.)
					Fpresw(2:N-2,1)=0.
					Fgravw(2:N-2,1)=0.
					Fprese(1:N-3,1)=0.
					Fgrave(1:N-3,1)=0.
				END WHERE
				WHERE (Fgravn(2:N-2,1)+Fpresn(2:N-2,1) .LE. 0.)
					Fpresn(2:N-2,1)=0.
					Fgravn(2:N-2,1)=0.
					Fpress(2:N-2,2)=0.
					Fgravs(2:N-2,2)=0.
				END WHERE
			END WHERE
			! NORTH
			WHERE  (water_content(2:N-2,M-1,1) .LE. irreducible) 
				WHERE (Fgravs(2:N-2,M-1)+Fpress(2:N-2,M-1) .LE. 0.)
					Fpress(2:N-2,M-1)=0.
					Fgravs(2:N-2,M-1)=0.
					Fpresn(2:N-2,M-2)=0.
					Fgravn(2:N-2,M-2)=0.
				END WHERE
				WHERE (Fgrave(2:N-2,M-1)+Fprese(2:N-2,M-1) .LE. 0.)
					Fprese(2:N-2,M-1)=0.
					Fgrave(2:N-2,M-1)=0.
					Fpresw(3:N-1,M-1)=0.
					Fgravw(3:N-1,M-1)=0.
				END WHERE
				WHERE (Fgravw(2:N-2,M-1)+Fpresw(2:N-2,M-1) .LE. 0.)
					Fpresw(2:N-2,M-1)=0.
					Fgravw(2:N-2,M-1)=0.
					Fprese(1:N-3,M-1)=0.
					Fgrave(1:N-3,M-1)=0.
				END WHERE

			END WHERE
			!EAST
			WHERE  (water_content(N-1,2:M-2,1) .LE. irreducible) 
				WHERE (Fgravs(N-1,2:M-2)+Fpress(N-1,2:M-2) .LE. 0.)
					Fpress(N-1,2:M-2)=0.
					Fgravs(N-1,2:M-2)=0.
					Fpresn(N-1,1:M-3)=0.
					Fgravn(N-1,1:M-3)=0.
				END WHERE
				WHERE (Fgravw(N-1,2:M-2)+Fpresw(N-1,2:M-2) .LE. 0.)
					Fpresw(N-1,2:M-2)=0.
					Fgravw(N-1,2:M-2)=0.
					Fprese(N-2,2:M-2)=0.
					Fgrave(N-2,2:M-2)=0.
				END WHERE
				WHERE (Fgravn(N-1,2:M-2)+Fpresn(N-1,2:M-2) .LE. 0.)
					Fpresn(N-1,2:M-2)=0.
					Fgravn(N-1,2:M-2)=0.
					Fpress(N-1,3:M-1)=0.
					Fgravs(N-1,3:M-1)=0.
				END WHERE
			END WHERE
			!WEST
			WHERE  (water_content(1,2:M-2,1) .LE. irreducible) 
				WHERE (Fgravs(1,2:M-2)+Fpress(1,2:M-2) .LE. 0.)
					Fpress(1,2:M-2)=0.
					Fgravs(1,2:M-2)=0.
					Fpresn(1,1:M-3)=0.
					Fgravn(1,1:M-3)=0.
				END WHERE
				WHERE (Fgrave(1,2:M-2)+Fprese(1,2:M-2) .LE. 0.)
					Fprese(1,2:M-2)=0.
					Fgrave(1,2:M-2)=0.
					Fpresw(2,2:M-2)=0.
					Fgravw(2,2:M-2)=0.
				END WHERE
				WHERE (Fgravn(1,2:M-2)+Fpresn(1,2:M-2) .LE. 0.)
					Fpresn(1,2:M-2)=0.
					Fgravn(1,2:M-2)=0.
					Fpress(1,3:M-1)=0.
					Fgravs(1,3:M-1)=0.
				END WHERE
			END WHERE
			!NORTH_EAST
			IF  (water_content(N-1,M-1,1) .LE. irreducible) THEN
				IF (Fgravs(N-1,M-1)+Fpress(N-1,M-1) .LE. 0.) THEN
					Fpress(N-1,M-1)=0.
					Fgravs(N-1,M-1)=0.
					Fpresn(N-1,M-2)=0.
					Fgravn(N-1,M-2)=0.
				ENDIF
				IF (Fgravw(N-1,M-1)+Fpresw(N-1,M-1) .LE. 0.) THEN
					Fpresw(N-1,M-1)=0.
					Fgravw(N-1,M-1)=0.
					Fprese(N-2,M-1)=0.
					Fgrave(N-2,M-1)=0.
				ENDIF
			ENDIF
			! SOUTH EAST
			IF  (water_content(N-1,1,1) .LE. irreducible)  THEN
				IF (Fgravw(N-1,1)+Fpresw(N-1,1) .LE. 0.) THEN
					Fpresw(N-1,1)=0.
					Fgravw(N-1,1)=0.
					Fprese(N-2,1)=0.
					Fgrave(N-2,1)=0.
				ENDIF
				IF (Fgravn(N-1,1)+Fpresn(N-1,1) .LE. 0.) THEN
					Fpresn(N-1,1)=0.
					Fgravn(N-1,1)=0.
					Fpress(N-1,2)=0.
					Fgravs(N-1,2)=0.
				ENDIF
			ENDIF
			! SOUTH WEST
			IF  (water_content(1,1,1) .LE. irreducible)  THEN
				IF (Fgrave(1,1)+Fprese(1,1) .LE. 0.) THEN
					Fprese(1,1)=0.
					Fgrave(1,1)=0.
					Fpresw(2,1)=0.
					Fgravw(2,1)=0.
				ENDIF
				IF (Fgravn(1,1)+Fpresn(1,1) .LE. 0.) THEN
					Fpresn(1,1)=0.
					Fgravn(1,1)=0.
					Fpress(1,2)=0.
					Fgravs(1,2)=0.
				ENDIF
			ENDIF
			! NORTH WEST
			IF  (water_content(1,M-1,1) .LE. irreducible)  THEN
				IF (Fgravs(1,M-1)+Fpress(1,M-1) .LE. 0.) THEN
					Fpress(1,M-1)=0.
					Fgravs(1,M-1)=0.
					Fpresn(1,M-2)=0.
					Fgravn(1,M-2)=0.
				ENDIF
				IF (Fgrave(1,M-1)+Fprese(1,M-1) .LE. 0.) THEN
					Fprese(1,M-1)=0.
					Fgrave(1,M-1)=0.
					Fpresw(2,M-1)=0.
					Fgravw(2,M-1)=0.
				ENDIF
			ENDIF

			Fpres(:,1:M-1)=Fpresn(:,1:M-1)+Fpress(:,1:M-1)+Fpresw(:,1:M-1)+Fprese(:,1:M-1)				
			Fgrav(:,1:M-1)=Fgravn(:,1:M-1)+Fgravs(:,1:M-1)+Fgravw(:,1:M-1)+Fgrave(:,1:M-1)

			outflow=outflow-Fgravs(:,1)*Dt
			sum_fluxes=sum_fluxes+(sum(Fgravs(:,1))+sum(Fgravn(:,M-1)))*Dt

			!------------- HEAT FLUXES ----------------------------------- 
			Fconds(2:N-2,2:M-2)=Sy_south(2:N-2,2:M-2)*k_eff_south(2:N-2,2:M-2)&
				&*(T(2:N-2,1:M-3,1)-T(2:N-2,2:M-2,1))/(abs(yv(2:N-2,2:M-2)-yv(2:N-2,1:M-3)))

			Fcondn(2:N-2,2:M-2)=Sy_south(2:N-2,2:M-2)*k_eff_north(2:N-2,2:M-2)&
				&*(T(2:N-2,3:M-1,1)-T(2:N-2,2:M-2,1))/(abs(yv(2:N-2,2:M-2)-yv(2:N-2,3:M-1)))

			Fconde(2:N-2,2:M-2)=Sx_east(2:N-2,2:M-2)*k_eff_east(2:N-2,2:M-2)*(T(3:N-1,2:M-2,1)-T(2:N-2,2:M-2,1))&
				&/(abs(xv(2:N-2,2:M-2)-xv(3:N-1,2:M-2)))

			Fcondw(2:N-2,2:M-2)=Sx_west(2:N-2,2:M-2)*k_eff_west(2:N-2,2:M-2)*(T(1:N-3,2:M-2,1)-T(2:N-2,2:M-2,1))&
				&/(abs(xv(2:N-2,2:M-2)-xv(1:N-3,2:M-2)))

			Fcond(:,1:M-1)=Fcondw(:,1:M-1)+Fconde(:,1:M-1)+Fconds(:,1:M-1)+Fcondn(:,1:M-1)

		ENDIF
	ELSE ! M=2

			WHERE  (water_content(2:N-2,1,1) .LE. irreducible) 

				WHERE (Fgrave(2:N-2,1)+Fprese(2:N-2,1) .LE. 0.)
					Fprese(2:N-2,1)=0.
					Fgrave(2:N-2,1)=0.
					Fpresw(3:N-1,1)=0.
					Fgravw(3:N-1,1)=0.
				END WHERE
				WHERE (Fgravw(2:N-2,1)+Fpresw(2:N-2,1) .LE. 0.)
					Fpresw(2:N-2,1)=0.
					Fgravw(2:N-2,1)=0.
					Fprese(1:N-3,1)=0.
					Fgrave(1:N-3,1)=0.
				END WHERE

			END WHERE
			! EAST
			IF  (water_content(N-1,1,1) .LE. irreducible) THEN
				IF (Fgravw(N-1,1)+Fpresw(N-1,1) .LE. 0.) THEN
					Fpresw(N-1,1)=0.
					Fgravw(N-1,1)=0.
					Fprese(N-2,1)=0.
					Fgrave(N-2,1)=0.
				ENDIF
			ENDIF
			! WEST
			IF  (water_content(1,1,1) .LE. irreducible)  THEN
				IF (Fgrave(1,1)+Fprese(1,1) .LE. 0.) THEN
					Fprese(1,1)=0.
					Fgrave(1,1)=0.
					Fpresw(2,1)=0.
					Fgravw(2,1)=0.
				ENDIF
			ENDIF

			Fpres(:,1)=Fpresn(:,1)+Fpress(:,1)+Fpresw(:,1)+Fprese(:,1)			
			Fgrav(:,1)=Fgravn(:,1)+Fgravs(:,1)+Fgravw(:,1)+Fgrave(:,1)

			outflow=outflow-Fgravs(:,1)*Dt
			sum_fluxes=sum_fluxes+(sum(Fgravs(:,1))+sum(Fgravn(:,1)))*Dt

			Fcond(:,1)=Fcondw(:,1)+Fconde(:,1)+Fconds(:,1)+Fcondn(:,1)
	ENDIF



	!!!!!!!!! SOLVING RICHARDS EQUATION !!!!!!!!!!!!!!!!!!!!!!!!!!!
	water_content(:,1:M-1,2)=water_content(:,1:M-1,1)+Dt*inv_Vol(:,1:M-1)*(Fgrav(:,1:M-1)+Fpres(:,1:M-1))
	
	IF (isnan(sum(water_content(:,:,1)))) THEN
		write(*,*) 'water',water_content(:,:,1)	
		write(*,*) 'pressure',P(:,:)
		write(*,*) 'grav',Fgrav(:,:)
		write(*,*) 'vol',inv_Vol
		return
	endif

	
	!!!!!!!!!! SOLVE HEAT TRANSFER EQUATION !!!!!!!!!!!!!!!!!!!!!!!!!!!
!	T(:,1:M-1,1)=T(:,1:M-1,1)+Dt*inv_Vol(:,1:M-1)*Fcond(:,1:M-1)/(rho_i*Cpi*(1-porosity(:,1:M-1))&
!		& + water_content(:,1:M-1,1)*rho_w*Cpw &
!		&+ rho_a*Cpa*(porosity(:,1:M-1)-water_content(:,1:M-1,1)))   ! water_content(i,j,1) (old) or water_content(i,j,2) (new)?


	!!!!!!!!!! UPDATE THE WATER CONTENT AND DENSITY !!!!!!!!!!!!!!!!!!!!!!!!
	density(:,1:M-1)=density(:,1:M-1)-rho_w*water_content(:,1:M-1,1)   
	water_content(:,1:M-1,1)=water_content(:,1:M-1,2)
	density(:,1:M-1)=density(:,1:M-1)+rho_w*water_content(:,1:M-1,1)   
	S(:,1:M-1)=max((water_content(:,1:M-1,1)-irreducible)/(porosity(:,1:M-1)-irreducible),0.)  

	volume_water=sum(water_content(:,1:M-1,1)*Vol(:,1:M-1))

	!!!!!!!!!!!!! REFREEZING of liquid water (illangasekare et al., 1990) !!!!!!!!!!!!!!!!!!!!!!!!!!!!
	freeze_max(:,1:M-1)=(-Cpi*dry_density(:,1:M-1)*T(:,1:M-1,1))*inv_Lf_rhow_w   ! same units as water content


	DO j=1,M-1
		DO i=1,N-1

			IF ((freeze_max(i,j).EQ.0) ) THEN ! nothing refreezes 

			ELSEIF (freeze_max(i,j)<(water_content(i,j,1))) THEN  ! not all the liquid water content refreezes
				T(i,j,1)=0.
				water_content(i,j,2)=water_content(i,j,1)-freeze_max(i,j)
				water_content(i,j,1)=water_content(i,j,2)
				ice_content=(1-porosity(i,j))+freeze_max(i,j)*rho_w*inv_rho_i   ! (1-porosity)????????? what about the old water content
				porosity(i,j)=1-ice_content(i,j)
				density(i,j)=ice_content(i,j)*rho_i+rho_w*water_content(i,j,1)    
				dry_density(i,j)=ice_content(i,j)*rho_i  
				S(i,j)=max((water_content(i,j,1)-irreducible)/(porosity(i,j)-irreducible),0.)    ! effective saturation
			ELSE ! all the liquid water content refreezes
				water_content(i,j,2)=0.
				T(i,j,2)=water_content(i,j,1)*Lf*rho_w/(Cpi*density(i,j))+T(i,j,1)
				ice_content=(1-porosity(i,j))+water_content(i,j,1)*rho_w*inv_rho_i ! (1-porosity)????????? what about the old water content 
				porosity(i,j)=1-ice_content(i,j)
				water_content(i,j,1)=water_content(i,j,2)
				T(i,j,1)=T(i,j,2)
				density(i,j)=ice_content(i,j)*rho_i 
				dry_density(i,j)=ice_content(i,j)*rho_i  
				S(i,j)=max((water_content(i,j,1)-irreducible)/(porosity(i,j)-irreducible),0.)    ! effective saturation
			ENDIF
		ENDDO
	ENDDO

	WHERE (S(:,1:M-1) .NE. 0.) ! as soon as cell gets wet, wet stays equal to 1
		wet(:,1:M-1)=1
	END WHERE	


!	call metamorphism



	mass_conservation=volume_water/(sum_fluxes)

	IF (time.GT.Dt_ini*q)  THEN
		q=q+1
		flag=2
	ENDIF


	DO j=1,M_ini-1
		IF (j.LE.M-1) THEN
			mean_water_content(j)=sum(water_content(:,j,1))*inv_N_1
			mean_dry_density(j)=sum(dry_density(:,j))*inv_N_1
		ELSE
			mean_water_content(j)=9999
			mean_dry_density(j)=9999
		ENDIF
	ENDDO


	IF (mod(q,iterations) .EQ. 0 .AND. flag.EQ.2)  THEN
		CALL VTSWriter(q/iterations,N,M,xn,yn,water_content(:,:,1),'water_output','int')
		CALL VTSWriter(q/iterations,N,M,xn,yn,T(:,:,1),'tempe_output','int')
		CALL VTSWriter(q/iterations,N,M,xn,yn,dry_density(:,:),'densi_output','int')
		CALL VTSWriter(q/iterations,N,M,xn,yn,grain_size(:,:),'Dopti_output','int')

		write(16,*) (mean_dry_density(j), j = 1, M_ini-1)

		write(18,*)  (outflow(i),i=1,N-1)

		write(20,*)  maxval(water_content(:,:,1))

		write(21,*)  (mean_water_content(j),j=1,M_ini-1)

		write(23,*) mass_conservation


		write(*,*) M-1,water_content(i-1,M-1,1),L2,T(i-1,M-1,1),P(i-1,M-1),time
		write(*,*) sum(water_content(:,:,1))
		write(*,*) 'time step', Dt


	ENDIF



ENDDO

 
 CALL VTSWriter(q/iterations,N,M,xn,yn,water_content(:,:,1),'water_output','end')
 CALL VTSWriter(q/iterations,N,M,xn,yn,T(:,:,1),'tempe_output','end')
 CALL VTSWriter(q/iterations,N,M,xn,yn,dry_density(:,:),'densi_output','end')
 CALL VTSWriter(q/iterations,N,M,xn,yn,grain_size(:,:),'Dopti_output','end')

 write(16,*) (mean_dry_density(j), j = 1, M_ini-1)
 close(16)

 write(18,*)  (outflow(i),i=1,N-1)
 close(18)


 write(20,*)  maxval(water_content(:,:,1))
 close(20)


 write(21,*)  (mean_water_content(j),j=1,M_ini-1)
 close(21)

 write(23,*) mass_conservation
 close(23)


 write(*,*) sum(outflow(:))
deallocate(ice_content,inv_Vol)
RETURN
END
